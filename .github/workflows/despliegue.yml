name: Deploy Symfony API with MySQL and Nginx

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Docker directory status:"
          ls -la Docker/ || echo "No Docker directory"
          ls -la docker/ || echo "No docker directory"

      - name: Create docker directory and move files
        run: |
          if [ -d "Docker" ]; then
            mkdir -p docker
            cp -r Docker/* docker/
            rm -rf Docker
          fi
          
          if [ ! -d "docker" ]; then
            mkdir -p docker
            echo "Created new docker directory"
          fi
          
          # Crear los Dockerfiles si no existen
          if [ ! -f "docker/php.Dockerfile" ]; then
            echo "FROM php:8.2-fpm
            ENV APP_ENV=prod
            ENV APP_DEBUG=0
            RUN apt-get update && apt-get install -y \
                libpng-dev \
                libjpeg-dev \
                libfreetype6-dev \
                libzip-dev \
                unzip \
                git \
                curl \
                libonig-dev \
                libxml2-dev \
                libicu-dev \
                && docker-php-ext-configure gd --with-freetype --with-jpeg \
                && docker-php-ext-install pdo pdo_mysql zip gd intl opcache
            WORKDIR /var/www/html
            COPY . .
            RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
                && composer install --no-dev --no-interaction --optimize-autoloader --no-scripts
            RUN php bin/console cache:clear --env=prod || true
            RUN chown -R www-data:www-data /var/www/html
            CMD [\"php-fpm\"]" > docker/php.Dockerfile
          fi

          if [ ! -f "docker/nginx.Dockerfile" ]; then
            echo "FROM nginx:latest
            COPY docker/nginx.conf /etc/nginx/conf.d/default.conf" > docker/nginx.Dockerfile
          fi

          if [ ! -f "docker/nginx.conf" ]; then
            echo "server {
                listen 80;
                server_name localhost;
                root /var/www/html/public;
                index index.php index.html;
                location / {
                    try_files \$uri /index.php\$is_args\$args;
                }
                location ~ \.php$ {
                    include fastcgi_params;
                    fastcgi_pass php:9000;
                    fastcgi_index index.php;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                }
                error_log /var/log/nginx/error.log;
                access_log /var/log/nginx/access.log;
            }" > docker/nginx.conf
          fi

          echo "Final docker directory contents:"
          ls -la docker/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest -f docker/php.Dockerfile ./
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest
          docker build -t ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest -f docker/nginx.Dockerfile ./
          docker push ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create compose.yml if not exists
        run: |
          if [ ! -f "compose.yml" ]; then
            echo "version: '3.8'

            services:
              php:
                image: ${{ secrets.DOCKER_USERNAME }}/symfony-app:latest
                container_name: symfony_app
                restart: unless-stopped
                environment:
                  DATABASE_URL: mysql://\${DB_USER:-app}:\${DB_PASSWORD:-!ChangeMe!}@database:3306/\${DB_NAME:-app}?serverVersion=8.0.32&charset=utf8mb4
                depends_on:
                  - database

              nginx:
                image: ${{ secrets.DOCKER_USERNAME }}/symfony-nginx:latest
                container_name: symfony_nginx
                ports:
                  - '80:80'
                depends_on:
                  - php
                restart: unless-stopped

              database:
                image: mysql:8.0
                container_name: symfony_mysql
                restart: unless-stopped
                environment:
                  MYSQL_DATABASE: \${DB_NAME:-app}
                  MYSQL_USER: \${DB_USER:-app}
                  MYSQL_PASSWORD: \${DB_PASSWORD:-!ChangeMe!}
                  MYSQL_ROOT_PASSWORD: \${DB_ROOT_PASSWORD:-!ChangeMe!}
                volumes:
                  - db_data:/var/lib/mysql

            volumes:
              db_data:" > compose.yml
          fi

      - name: Transfer compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          source: "compose.yml"
          target: "~/deploy/"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            cd ~/deploy
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker-compose pull
            docker-compose down
            docker-compose up -d

      - name: Run database migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          script: |
            docker exec symfony_app php bin/console doctrine:database:create --if-not-exists
            docker exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction